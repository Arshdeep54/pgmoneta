name: CI

on:
  push:
    branches:
      - main
      - 0.15.x
  pull_request:
    branches:
      - main
      - 0.15.x
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - name: Install Dependencies
        run: |
          sudo apt update -y
          sudo apt install -y \
          git gcc clang clang-tools cmake make \
          libev4 libev-dev libssl-dev libsystemd-dev \
          zlib1g zlib1g-dev libzstd-dev liblz4-dev \
          libssh-dev libcurl4-openssl-dev libatomic1 \
          python3-docutils libbz2-dev libarchive-dev \
          bzip2 net-tools check graphviz doxygen \
          pandoc texlive texlive-latex-extra \
          texlive-fonts-extra texlive-xetex texlive-luatex \
          texlive-science texlive-extra-utils texlive-lang-all
             
      - name: Install Eisvogel template for Pandoc
        run: |
          wget https://github.com/Wandmalfarbe/pandoc-latex-template/releases/download/2.4.2/Eisvogel-2.4.2.tar.gz
          tar -xzf Eisvogel-2.4.2.tar.gz
          mkdir -p ~/.local/share/pandoc/templates
          mv eisvogel.latex ~/.local/share/pandoc/templates/

       
      - name: Install PostgreSQL
        run: |
          sudo apt install curl ca-certificates
          sudo install -d /usr/share/postgresql-common/pgdg
          sudo curl -o /usr/share/postgresql-common/pgdg/apt.postgresql.org.asc --fail https://www.postgresql.org/media/keys/ACCC4CF8.asc
          sudo sh -c 'echo "deb [signed-by=/usr/share/postgresql-common/pgdg/apt.postgresql.org.asc] https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          sudo apt update
          sudo apt install -y postgresql-17
      - name: Set Env Path Variable
        run: |
          echo "PATH=$PATH:/usr/lib/postgresql/17/bin" >> $GITHUB_ENV
          echo $PATH
      - name: Build Project
        run: |
            mkdir build
            cd build
            if [ "${{ matrix.compiler }}" = "gcc" ]; then
              export CC=/usr/bin/gcc
            else
              export CC=/usr/bin/clang
            fi
             
            cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
             make -j$(nproc)
        working-directory: /home/runner/work/pgmoneta/pgmoneta/
      
      - name: GCC/Testsuite
        id: gcc-test
        run: $(which bash) ./testsuite.sh
        working-directory: /home/runner/work/pgmoneta/pgmoneta/build
      
      - name: Upload Build and Run Logs as Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.compiler }}-${{ matrix.build_type }}
          path:  /home/runner/work/pgmoneta/pgmoneta/build/log
          retention-days: 90
       
      - name: CLANG/Testsuite Clean
        run: $(which bash) ./testsuite.sh clean
        working-directory: /home/runner/work/pgmoneta/pgmoneta/build

      - name: Upload Generated Documentation Artifact
        if: matrix.compiler == 'gcc' && matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: generated-docs
          path: /home/runner/work/pgmoneta/pgmoneta/build/doc
          retention-days: 90
          
      
      
      

  build-macos:
    runs-on: macos-latest
    env:
      PGMONETA_ROOT: ${{ github.workspace }}
      BUILD_DIR: ${{ github.workspace }}/build
      POSTGRESQL_VERSION: "@17"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
      - name: Install dependencies
        run: |
          brew update
          brew install \
            libev \
            docutils \
            libarchive \
            check \
            postgresql${POSTGRESQL_VERSION} \
            libssh
      - name: Add PostgreSQL to PATH
        run: |
          echo "$(brew --prefix postgresql${POSTGRESQL_VERSION})/bin" >> $GITHUB_PATH
      - name: Build with Clang
        run: |
          mkdir -p $BUILD_DIR
          cd $BUILD_DIR
          export CC=$(xcrun -find clang)
          cmake -DCMAKE_BUILD_TYPE=Debug ..
          make -j$(sysctl -n hw.ncpu)
      - name: Run tests with Clang build
        working-directory: ${{ env.BUILD_DIR }}
        run: $(which bash) ./testsuite.sh

      - name: Clean up after Clang tests
        working-directory: ${{ env.BUILD_DIR }}
        run: $(which bash) ./testsuite.sh clean
      
      - name: Show logs on failure
        if: failure()
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          cat ./log/logfile || echo "logfile not found"
          cat ./log/pgmoneta.log || echo "pgmoneta.log not found"
      
      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: macos-build-logs
          path: |
            ${{ env.BUILD_DIR }}/log/
            /tmp/*.log
          retention-days: 7

  build-freebsd:
    runs-on: ubuntu-latest
    name: FreeBSD Build and Test
    steps:
        - uses: actions/checkout@v4

        - name: Install QEMU dependencies
          run: |
            sudo apt-get update
            sudo apt-get install -y \
              qemu-system-x86 \
              qemu-utils \
              libvirt-daemon-system \
              libvirt-clients \
              bridge-utils
            sudo systemctl start libvirtd

        - name: Setup FreeBSD VM
          uses: vmactions/freebsd-vm@v1
          id: freebsd-vm
          with:
            release: "14.2"
            usesh: true
            envs: "PATH,GITHUB_ENV,GITHUB_WORKSPACE"
            mem: 6144
            sync: rsync
            copyback: true
            prepare: |
              # System setup
              pkg update -y
              pkg install -y \
                libev \
                cmake \
                clang \
                postgresql17-server \
                postgresql17-contrib \
                zstd \
                lz4 \
                bzip2 \
                libssh \
                libarchive \
                check \
                python3-docutils \
                doxygen \
                graphviz \
                net-tools

              # Configure SSH for localhost resolution
              echo "127.0.0.1 freebsd" >> /etc/hosts
              sysrc sshd_enable=YES
              service sshd start

              # PostgreSQL initialization
              sysrc postgresql_enable=YES
              service postgresql initdb
              service postgresql start

        - name: Configure PostgreSQL
          shell: freebsd {0}
          run: |
            echo "wal_level = replica" >> /var/db/postgres/data17/postgresql.conf
            echo "host replication repl 127.0.0.1/32 md5" >> /var/db/postgres/data17/pg_hba.conf
            service postgresql restart
            sudo -u postgres psql -c "CREATE ROLE repl WITH LOGIN REPLICATION PASSWORD 'secretpassword';"
            sudo -u postgres psql -c "SELECT pg_create_physical_replication_slot('repl', true, false);"
        - name: CLANG/mkdir
          shell: freebsd {0}
          run: mkdir build
          working-directory: ${{ github.workspace }}

        - name: CLANG/cmake
          shell: freebsd {0}
          run: cmake -DCMAKE_BUILD_TYPE=Debug ..
          working-directory: ${{ github.workspace }}/build

        - name: CLANG/make
          shell: freebsd {0}
          run: make -j$(sysctl -n hw.ncpu)
          working-directory: ${{ github.workspace }}/build

        - name: CLANG/Testsuite
          id: clang-test
          shell: freebsd {0}
          run: ./testsuite.sh
          working-directory: ${{ github.workspace }}/build

        - name: CLANG/Testsuite Clean
          shell: freebsd {0}
          run: ./testsuite.sh clean
          working-directory: ${{ github.workspace }}/build

        - name: CLANG/rm -Rf
          shell: freebsd {0}
          run: rm -Rf build
          working-directory: ${{ github.workspace }}

        - name: Show logs on failure
          if: failure() && steps.clang-test.outcome == 'failure'
          shell: freebsd {0}
          run: |
            cat ./log/logfile || echo "logfile not found"
            cat ./log/pgmoneta.log || echo "pgmoneta.log not found"
            ./testsuite.sh clean
          working-directory: ${{ github.workspace }}/build

        - name: Upload logs on failure
          if: failure()
          uses: actions/upload-artifact@v4
          with:
            name: freebsd-logs
            path: |
              ${{ github.workspace }}/build/log/*
              /tmp/*.log
            retention-days: 7